// Variable para almacenar el último mensaje recibido
let lastMessage = "";
let isAppVisible = false;
let hideTimeout = null;

// Función para mostrar popup inicial
function showInitialPopup() {
  g.clear();
  g.setColor(0, 0, 0.8); // Fondo azul oscuro
  g.fillRect(0, 0, 176, 176);
  
  g.setColor(1, 1, 1); // Texto blanco
  g.setFont("6x8", 2);
  g.setFontAlign(0, 0); // Centrar automáticamente
  
  g.drawString("Pleez ready", 88, 80);
  g.drawString("Waiting for signals...", 88, 100);
  
  g.flip();
  
  // Después de 2 segundos, ocultar la pantalla pero mantener la app activa
  setTimeout(function() {
    hideApp();
  }, 2000);
}

// Función para ocultar la pantalla (pero mantener la app activa)
function hideApp() {
  isAppVisible = false;
  g.clear();
  g.flip();
  // NO llamamos load() - mantenemos la app activa en background
  console.log("App hidden but still active");
}

// Función para mostrar la app
function showApp() {
  isAppVisible = true;
  
  // Cancelar cualquier timeout de ocultación pendiente
  if (hideTimeout) {
    clearTimeout(hideTimeout);
    hideTimeout = null;
  }
  
  redrawScreen();
  console.log("App shown");
  
  // Auto-hide after 12 seconds to avoid needing scheduleAutoHide initially
  hideTimeout = setTimeout(function() {
    if (isAppVisible) {
      hideApp();
    }
  }, 12000);
}

// Función para auto-ocultar después de un tiempo de inactividad
function scheduleAutoHide(delay = 10000) { // 10 segundos por defecto
  if (hideTimeout) {
    clearTimeout(hideTimeout);
  }
  
  hideTimeout = setTimeout(function() {
    if (isAppVisible) {
      hideApp();
    }
  }, delay);
}

// Función para manejar mensajes recibidos desde la app del teléfono
function onGB(event) {
  console.log("GB event received:", event);
  
  if (event.t === "notify") {
    lastMessage = event.msg;
    console.log("Mensaje procesado:", event.msg);
    
    // Si recibimos "FinTimer", ocultar la app
    if (event.msg === "FinTimer") {
      console.log("FinTimer recibido, ocultando app");
      hideApp();
      return;
    }
    
    // Para cualquier otro mensaje, mostrar la app
    showApp();
    
    // Programar auto-ocultación después de 15 segundos de inactividad
    if (typeof scheduleAutoHide === 'function') {
      scheduleAutoHide(15000);
    } else {
      console.log("scheduleAutoHide function not available yet");
      // Fallback: hide after 15 seconds
      setTimeout(function() {
        if (isAppVisible) hideApp();
      }, 15000);
    }
  }
}

// Dibujar la pantalla completa (mensaje y botones)
function redrawScreen() {
  g.clear();
  g.setColor(0, 0, 1); // Fondo azul
  g.fillRect(0, 0, 176, 176);
  
  // Mostrar mensaje en la parte superior
  g.setColor(1, 1, 1);
  g.setFont("6x8", 2);
  g.setFontAlign(-1, -1); // Alineación izquierda-superior
  
  // Dividir el mensaje en líneas si es muy largo
  let displayMsg = "Señal: " + lastMessage;
  if (g.stringWidth(displayMsg) > 156) { // Dejar margen
    displayMsg = "Señal:\n" + lastMessage;
  }
  g.drawString(displayMsg, 10, 10);
  
  // Dibujar botones
  drawButtons();
  
  g.flip();
}

// Función separada para dibujar botones
function drawButtons() {
  // Botón Ok (verde)
  g.setColor(0, 0.8, 0);
  g.fillRect(10, 100, 86, 150);
  
  // Botón Postpone (rojo)
  g.setColor(0.8, 0, 0);
  g.fillRect(90, 100, 166, 150);
  
  // Texto de los botones
  g.setColor(1, 1, 1);
  g.setFont("6x8", 3);
  g.setFontAlign(0, 0); // Centrado
  g.drawString("OK", 48, 125);
  g.drawString("WAIT", 128, 125);
}

// Feedback visual para botones
function buttonFeedback(isOkButton) {
  let x1 = isOkButton ? 10 : 90;
  let x2 = isOkButton ? 86 : 166;
  
  // Cambiar color temporalmente
  g.setColor(isOkButton ? 0 : 0.3, isOkButton ? 0.3 : 0, 0);
  g.fillRect(x1, 100, x2, 150);
  
  g.setColor(1, 1, 1);
  g.setFont("6x8", 3);
  g.setFontAlign(0, 0);
  g.drawString(isOkButton ? "OK" : "WAIT", isOkButton ? 48 : 128, 125);
  g.flip();
}

// Manejar toques en la pantalla
Bangle.on("touch", function (button, xy) {
  if (!isAppVisible) {
    // Si la app está oculta y hay un toque, mostrarla brevemente
    showApp();
    scheduleAutoHide(5000); // Auto-ocultar en 5 segundos
    return;
  }
  
  console.log("Touch at: x=" + xy.x + ", y=" + xy.y);
  
  // Área de botones
  if (xy.y >= 100 && xy.y <= 150) {
    let message;
    let isOkButton = false;
    
    if (xy.x >= 10 && xy.x <= 86) {
      message = "Ok";
      isOkButton = true;
    } else if (xy.x >= 90 && xy.x <= 166) {
      message = "Postpone";
    }
    
    if (message) {
      console.log("Button pressed:", message);
      
      // Mostrar feedback visual
      buttonFeedback(isOkButton);
      
      // Enviar respuesta
      setTimeout(function() {
        try {
          Bluetooth.println(JSON.stringify({ t: "notify", msg: message }));
          console.log("Response sent:", message);
          
          // Ocultar app después de enviar respuesta
          setTimeout(function() {
            hideApp();
          }, 500); // Reduced delay
          
        } catch (e) {
          console.log("Error sending response:", e);
        }
      }, 150); // Reduced delay for faster response
    }
  } else {
    // Toque fuera de botones - extender tiempo visible
    scheduleAutoHide(10000);
  }
});

// Manejar botón físico para mostrar/ocultar
setWatch(function() {
  if (isAppVisible) {
    hideApp();
  } else {
    showApp();
    scheduleAutoHide(10000);
  }
}, BTN, { repeat: true, edge: "falling" });

// Registrar el manejador de eventos Gadgetbridge
GB = onGB;

// Configuración inicial
NRF.setAdvertising({}, { connectable: true });

// Deshabilitar seguimiento de actividad para evitar interferencias
Bangle.setOptions({ 
  hrmPollInterval: 0,
  wakeOnBTN1: false, // Evitar despertar accidental
  wakeOnBTN2: true,  // Permitir despertar con BTN2
  wakeOnBTN3: false,
  wakeOnTouch: true  // Permitir despertar con toque
});

if (Bangle.setStepCount) Bangle.setStepCount(0);
Bangle.removeAllListeners('step');
Bangle.removeAllListeners('health');
Bangle.removeAllListeners('HRM');

// Mostrar popup inicial
console.log("Pleez app started");
showInitialPopup();
