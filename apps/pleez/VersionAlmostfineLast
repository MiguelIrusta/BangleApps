// Variable para almacenar el último mensaje recibido
let lastMessage = "";
let isAppVisible = false;
let hideTimeout = null;
let clockInterval = null; // Single declaration at the top

// Función para mostrar popup inicial
function showInitialPopup() {
  g.clear();
  g.setColor(0, 0, 0.8); // Fondo azul oscuro
  g.fillRect(0, 0, 176, 176);
  
  g.setColor(1, 1, 1); // Texto blanco
  g.setFont("6x8", 2);
  g.setFontAlign(0, 0); // Centrar automáticamente
  
  g.drawString("Pleez ready", 88, 80);
  g.drawString("Waiting for signals...", 88, 100);
  
  g.flip();
  
  // Después de 2 segundos, ocultar la pantalla pero mantener la app activa
  setTimeout(function() {
    hideApp();
  }, 2000);
}

// Función para ocultar la pantalla (pero mantener la app activa)
function hideApp() {
  isAppVisible = false;
  showClock(); // Mostrar reloj en lugar de pantalla vacía
  console.log("App hidden but still active");
}

// Función para mostrar un reloj simple cuando la app está oculta
function showClock() {
  // Limpiar intervalo anterior si existe
  if (clockInterval) {
    clearInterval(clockInterval);
    clockInterval = null;
  }
  
  function updateClock() {
    if (isAppVisible) {
      if (clockInterval) {
        clearInterval(clockInterval);
        clockInterval = null;
      }
      return; // No actualizar si la app está visible
    }
    
    let now = new Date();
    let hours = now.getHours().toString();
    if (hours.length < 2) hours = "0" + hours;
    let minutes = now.getMinutes().toString();
    if (minutes.length < 2) minutes = "0" + minutes;
    let seconds = now.getSeconds().toString();
    if (seconds.length < 2) seconds = "0" + seconds;
    
    g.clear();
    g.setColor(0, 0, 0); // Fondo negro
    g.fillRect(0, 0, 176, 176);
    
    // Hora principal
    g.setColor(1, 1, 1);
    g.setFont("Vector", 30);
    g.setFontAlign(0, 0);
    g.drawString(hours + ":" + minutes, 88, 70);
    
    // Segundos más pequeños
    g.setFont("Vector", 18);
    g.drawString(seconds, 88, 100);
    
    // Indicador de que Pleez está activo
    g.setColor(0, 0.5, 1);
    g.setFont("6x8", 1);
    g.drawString("Pleez Active", 88, 140);
    
    g.flip();
  }
  
  // Actualizar inmediatamente
  updateClock();
  
  // Configurar intervalo para actualizar cada segundo
  clockInterval = setInterval(updateClock, 1000);
}

// Función para mostrar la app
function showApp() {
  isAppVisible = true;
  
  // Limpiar intervalo del reloj si existe
  if (clockInterval) {
    clearInterval(clockInterval);
    clockInterval = null;
  }
  
  // Cancelar cualquier timeout de ocultación pendiente
  if (hideTimeout) {
    clearTimeout(hideTimeout);
    hideTimeout = null;
  }
  
  redrawScreen();
  console.log("App shown - buttons available until pressed or FinTimer");
  
  // NO auto-hide timer - app stays visible until button pressed or FinTimer
}

// Función para auto-ocultar después de un tiempo de inactividad
function scheduleAutoHide(delay) {
  if (typeof delay === 'undefined') delay = 20000; // 20 segundos por defecto
  
  // Clear any existing timeout
  if (hideTimeout) {
    clearTimeout(hideTimeout);
    hideTimeout = null;
  }
  
  hideTimeout = setTimeout(function() {
    if (isAppVisible) {
      hideApp();
    }
  }, delay);
}

// Función para manejar mensajes recibidos desde la app del teléfono
function onGB(event) {
  console.log("GB event received:", event);
  
  if (event.t === "notify") {
    lastMessage = event.msg;
    console.log("Mensaje procesado:", event.msg);
    
    // Si recibimos "FinTimer", ocultar la app
    if (event.msg === "FinTimer") {
      console.log("FinTimer recibido, ocultando app");
      hideApp();
      return;
    }
    
    // Vibrar cuando llega un mensaje (excepto FinTimer)
    try {
      Bangle.buzz(500); // Vibrar por 500ms
      console.log("Vibration sent");
    } catch (e) {
      console.log("Vibration error:", e);
    }
    
    // Para cualquier otro mensaje, mostrar la app
    showApp();
  }
}

// Dibujar la pantalla completa (mensaje y botones)
function redrawScreen() {
  g.clear();
  g.setColor(0, 0, 1); // Fondo azul
  g.fillRect(0, 0, 176, 176);
  
  // Mostrar mensaje en la parte superior
  g.setColor(1, 1, 1);
  g.setFont("6x8", 2);
  g.setFontAlign(-1, -1); // Alineación izquierda-superior
  
  // Dividir el mensaje en líneas si es muy largo
  let displayMsg = "Señal: " + lastMessage;
  if (g.stringWidth(displayMsg) > 156) { // Dejar margen
    displayMsg = "Señal:\n" + lastMessage;
  }
  g.drawString(displayMsg, 10, 10);
  
  // Dibujar botones
  drawButtons();
  
  g.flip();
}

// Función separada para dibujar botones
function drawButtons() {
  // Botón Ok (verde)
  g.setColor(0, 0.8, 0);
  g.fillRect(10, 100, 86, 150);
  
  // Botón Postpone (rojo)
  g.setColor(0.8, 0, 0);
  g.fillRect(90, 100, 166, 150);
  
  // Texto de los botones
  g.setColor(1, 1, 1);
  g.setFont("6x8", 3);
  g.setFontAlign(0, 0); // Centrado
  g.drawString("OK", 48, 125);
  g.drawString("WAIT", 128, 125);
}

// Feedback visual para botones
function buttonFeedback(isOkButton) {
  let x1 = isOkButton ? 10 : 90;
  let x2 = isOkButton ? 86 : 166;
  
  // Cambiar color temporalmente
  g.setColor(isOkButton ? 0 : 0.3, isOkButton ? 0.3 : 0, 0);
  g.fillRect(x1, 100, x2, 150);
  
  g.setColor(1, 1, 1);
  g.setFont("6x8", 3);
  g.setFontAlign(0, 0);
  g.drawString(isOkButton ? "OK" : "WAIT", isOkButton ? 48 : 128, 125);
  g.flip();
  
  // Restore original button appearance after feedback
  setTimeout(function() {
    if (isAppVisible) {
      drawButtons();
      g.flip();
    }
  }, 200);
}

// Manejar toques en la pantalla
Bangle.on("touch", function (button, xy) {
  // Si la app está oculta, NO hacer nada (no mostrar la app)
  // Solo se muestra cuando llega un mensaje
  if (!isAppVisible) {
    console.log("App hidden - touch ignored");
    return;
  }
  
  console.log("Touch at: x=" + xy.x + ", y=" + xy.y);
  
  // Área de botones - siempre verificar si está en área de botones
  if (xy.y >= 100 && xy.y <= 150) {
    let message;
    let isOkButton = false;
    
    if (xy.x >= 10 && xy.x <= 86) {
      message = "Ok";
      isOkButton = true;
    } else if (xy.x >= 90 && xy.x <= 166) {
      message = "Postpone";
    }
    
    if (message) {
      console.log("Button pressed:", message);
      
      // Mostrar feedback visual
      buttonFeedback(isOkButton);
      
      // Enviar respuesta inmediatamente
      try {
        Bluetooth.println(JSON.stringify({ t: "notify", msg: message }));
        console.log("Response sent:", message);
        
        // Ocultar app después de enviar respuesta
        setTimeout(function() {
          hideApp();
        }, 800);
        
      } catch (e) {
        console.log("Error sending response:", e);
      }
    }
  }
  // No reset auto-hide timer - buttons should stay available until pressed or FinTimer
});

// Manejar botón físico para mostrar/ocultar
setWatch(function() {
  if (isAppVisible) {
    hideApp();
  } else {
    showApp();
  }
}, BTN, { repeat: true, edge: "falling" });

// Registrar el manejador de eventos Gadgetbridge
GB = onGB;

// Configuración inicial
NRF.setAdvertising({}, { connectable: true });

// Deshabilitar seguimiento de actividad para evitar interferencias
Bangle.setOptions({ 
  hrmPollInterval: 0,
  wakeOnBTN1: false, // Evitar despertar accidental
  wakeOnBTN2: true,  // Permitir despertar con BTN2
  wakeOnBTN3: false,
  wakeOnTouch: true, // Permitir despertar con toque
  lockTimeout: 0,    // Disable screen lock to prevent touch blocking
  backlightTimeout: 0 // Keep screen always on when app is visible
});

if (Bangle.setStepCount) Bangle.setStepCount(0);
Bangle.removeAllListeners('step');
Bangle.removeAllListeners('health');
Bangle.removeAllListeners('HRM');

// Mostrar popup inicial
console.log("Pleez app started");
showInitialPopup();
